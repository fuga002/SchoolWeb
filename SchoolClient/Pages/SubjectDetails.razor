@page "/subjectDetails/{item}"
@using SchoolClient.Services
@using SchoolData.Models.TaskModels
@using System.Text.Json
@using SchoolData.Models.SubjectModels
@using System.Security.Claims
@using SchoolData.StaticServices
@inject HttpService HttpService
@code {
    [Parameter]
    public string item { get; set; }
    List<TaskModel> taskModels = new List<TaskModel>();
    SubjectModelByAdmin subject = new SubjectModelByAdmin();
    TaskResponseModel response = new TaskResponseModel();
    Guid userId;
    bool check = false;
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var subjectId = JsonSerializer.Deserialize<int>(Uri.UnescapeDataString(item));
            taskModels = await HttpService.GetEntitiesFromApi<TaskModel>("https://localhost:7251/api/Tasks", subjectId);
            subject = await HttpService.GetEntityFromApi<SubjectModelByAdmin>("https://localhost:7251/api/Subjects/getSubject", subjectId);
            userId = await HttpService.GetUserId();
            StateHasChanged();
        }
    }
}
<div>
    <header class="header">
        <h1 class="header_title"><b>@subject.SubjectName</b></h1>
        <h3 class="header_title">@subject.SubjectDescription</h3>
        <h4>Total grade @subject.TotalGrade</h4>
        <div><i class="fa-solid fa-arrow-left-long header_icon"></i></div>
    </header>
    <main class="main">
        @if (taskModels.Count != 0)
        {
            <div class="main_card">
                @foreach (var task in taskModels)
                {
                    <Card>
                        <CardBody>
                            <CardTitle Size="3">
                                @task.TaskTitle
                            </CardTitle>
                            <CardText>
                                @task.TaskDescription
                            </CardText>
                            <CardText>
                                <strong>Start date :</strong>  @task.StartDate.ToString("dd/MM/yyyy");
                                <br/>
                                <strong>End date  : </strong> @task.EndDate.ToString("dd/MM/yyyy");
                            </CardText>
                            @if (task.TaskResponses?.Any(x => x.UserId == userId) ?? false)
                            {

                                @switch (task.TaskResponses?.FirstOrDefault(x => x.UserId == userId)?.Status)
                                {
                                    case StaticNames.ResponsePending:
                                    {
                                        <Button  Color="Color.Primary" Margin="Margin.Is2.FromTop">
                                            @StaticNames.ResponsePending
                                        </Button>
                                        break;
                                    }
                                    case StaticNames.ResponseDeclined:
                                    {
                                        <Button Color="Color.Danger" Margin="Margin.Is2.FromTop">
                                            @StaticNames.ResponseDeclined
                                        </Button>
                                        break;
                                    }
                                }
                            }
                            else
                            {
                                <Button Color="Color.Primary" Margin="Margin.Is2.FromTop">
                                    <Button Color="Color.Primary" Clicked="() => ShowCreateModal(task)">Response Task</Button><Icon Name="IconName.ArrowRight" />
                                </Button>
                            }
                        </CardBody>
                    </Card>
                }
            </div>
        }
        else
        {
            <h3><b>There is no any task!</b></h3>
        }
    </main>
</div>


<Modal @ref="createModal">
    <ModalContent Centered>
        <EditForm Model="@_createTaskResponseModel">
            <DataAnnotationsValidator />
            <ModalHeader>
                <ModalTitle>Add task</ModalTitle>
                <CloseButton />
            </ModalHeader>
            <ModalBody>
                <Field>
                    <FieldLabel>Name</FieldLabel>
                    <InputFile @bind-Value="@_createTaskResponseModel.File" Placeholder="File" />
                    <ValidationMessage For="@(() => _createTaskResponseModel.File)" />
                </Field>
                <Field>
                    <FieldLabel>Description</FieldLabel>
                    <InputText @bind-Value="@_createTaskResponseModel.ResponseText" Placeholder="Response text" />
                    <ValidationMessage For="@(() => _createTaskResponseModel.ResponseText)" />
                </Field>
            </ModalBody>
            <ModalFooter>
                <Button Color="Color.Secondary" Clicked="@HideModal">Close</Button>
                <Button Color="Color.Primary" Clicked="HandleValidSubmit">Save Changes</Button>
            </ModalFooter>
        </EditForm>
    </ModalContent>

</Modal>

@code {

    readonly CreateTaskResponseModel _createTaskResponseModel = new CreateTaskResponseModel();

    private Modal createModal;



    
    private async Task ShowCreateModal(TaskModel model)
    {
        await createModal.Show();
        _createTaskResponseModel.TaskId = model.Id;
    }


    private async Task HandleValidSubmit()
    {
        var response = await HttpService.Post($"https://localhost:7251/api/TaskResponses/AddTaskResponse", _createTaskResponseModel);
        await createModal.Hide();
    }

    private async Task HideModal(MouseEventArgs arg)
    {
        await createModal.Hide();
    }

}